 for (int i = 0; i < nums.length; i++) { 
        }
 for (int num : nums) {}
for (int num : set) {}
System.out.println(num);
System.out.println("nums[i]:"+nums[i]);
private int next(int m) {}
  Arrays.sort(nums);（small-big)
nums.length

Set<Integer> set = new HashSet<>();
                set.contains(nums[i])
                set.add(nums[i]);//0： already has element
               set.size()
               set.remove(nums[i]);
	Collections.min(set)

Map<Integer,Integer>map=new HashMap<>();
                   map.containsKey(N)
 	   map.get(N)
                   map.put(nums[i],i);
                  map. put(K key,V value)

 List<Integer> list= new ArrayList<>();
                   list.add(i);
 	list.get(i);
	list.size(i);
 	   List<Integer> vals = new ArrayList<>();
                vals.add(currentNode.val);
                vals.size()
                get(front)
                int remove =  vals.remove(0);


 return new int[] { map.get(diff),i };

Math.sqrt(c)
Math.pow(i, 2)
 if (b == (int) b)//check integer
a=Math.max(a,b);
Math.abs()
for(int n : ans) res += n;

Arrays.sort(nums);

 int[] result = new int[resultvector.size()];
        int k = 0;
        for (Integer num : resultvector) {
            result[k++] = num;
        }


  ListNode result = new ListNode(0,head);
 ListNode temp=null;
ListNode cur=head;
  while(cur!=null){
              cur=cur.next;
        }


char[] s
s.length




 compare and sort
int[][] intervals
        Arrays.sort(intervals,new Comparator<int[]>(){
            @Override(s-b)
            public int compare(int[] o1, int[] o2) {
            if (o1[0] == o2[0]) return 0;
            if (o1[0] < o2[0]) return -1;
            return 1;
            }
        });

        Arrays.sort(people, (a, b) -> {
            if (a[0] == b[0]) return a[1] - b[1];(S-B)
            return b[0] - a[0];(B-S)
        });






string S
        for (int i = 0; i < S.length(); ++i)
            last[S.charAt(i) - 'a'] = i;（0：a 1:b...）

Liklist：
       List<int[]> output = new LinkedList<>();
      output.add(pos of p , p);
      output.toArray(new int[n][2]);


n < 0 ? a : b
public int helper() {}