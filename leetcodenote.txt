 for (int i = 0; i < nums.length; i++) { 
        }
 for (int num : nums) {}
for (int num : set) {}
System.out.println(num);
System.out.println("nums[i]:"+nums[i]);
private int next(int m) {}
  Arrays.sort(nums);（small-big)
nums.length

Set<Integer> set = new HashSet<>();
                set.contains(nums[i])
                set.add(nums[i]);//0： already has element
               set.size()
               set.remove(nums[i]);
	Collections.min(set)

Map<Integer,Integer>map=new HashMap<>(){{
		put('2', "abc");}};
		Character/String
                   map.containsKey(N)
 	   map.get( key)(
                   map.put(nums[i],i);
                  map. put(K key,V value)
 	  returned_value = hash_map.remove(Key);
                  map.remove(key)

 List<Integer> list= new ArrayList<>();
                   list.add(i);
 	list.get(i);
	list.size();
                nums.set(index, last);

                vals.add(currentNode.val);
                vals.size()
                get(pos)

                int remove =  vals.remove(0);
 	List<List<Integer>> result =new ArrayList<>();
	List<Integer> path=new ArrayList<>();
	result.add(new ArrayList<>(path));

 LinkedList<String> list = new LinkedList<String>();
 	list.add("Geeks");/(ADD LAST)
             list.add((Integer)1);(物品)list.add(1);(位置）
                   list[pos].remove(Integer)1)(remove 第一个 1）

                  list.indexOf((Integer)key)!=-1)(找不到目标 返回-1)

	 list.removeLast()
                        list.get(pos);
	result.add(new ArrayList<>(list ));
              List<int[]> output = new LinkedList<>();
            output.add(pos of p , p);
            output.toArray(new int[n][2]);


 StringBuilder sb = new StringBuilder();
	sb.append(paths.get(i)).append("->");（get(String)）

            	 list.add(sb.toString());
	sb .deleteCharAt(index);
                 sb.charAt(sb.length()-1)
                   sb.toString()
                     sb.setCharAt(pos, '!');

Deque<String> deque = new LinkedList<>();
         addLast(E e)
          removeFirst()
         getFirst()
        addFirst(E e)
        removeLast()
       getLast() 
     de_que.size()
     E pollFirst()：remove and get
     pop；remove first; 



 return new int[] { map.get(diff),i };

Math
    Math.sqrt(c)
    Math.pow(i, 2)
     if (b == (int) b)//check integer
    a=Math.max(a,b);
    Math.abs()
    for(int n : ans) res += n;

Arrays.sort(nums);

 int[] result = new int[resultvector.size()];
        int k = 0;
        for (Integer num : resultvector) {
            result[k++] = num;
        }
	Arrays.fill（result，0);

                    for (char ch :strs[i-1].toCharArray()) {
                        if (ch == '0') {
                            zeros++;
                        } else {
                            ones++;
                        }
                    }
   int [] result=Arrays.copyOfRange(arr1, 1, 3);(not include 3)


  ListNode result = new ListNode(0,head);
 ListNode temp=null;
ListNode cur=head;
  while(cur!=null){
              cur=cur.next;
        }


char[] c
s.length
	Character.toLowerCase(c)
	Character.isLetterOrDigit(c)
		.isDigit(c)


String digits;
	char digit = digits.charAt(index)
	digits.length()
	digits.substring(0,digits.length())(all)
	digits.substring（x,y）(不包含y）
 	
	char[] ch = digits.toCharArray();
	new String(digit )
 	char c = digits;.charAt(left);
	c == ' '
	String s=String.valueOf(int)
	String key = String.valueOf(ch[]);
	String[] s1 = s.trim().split(" ");
                    s1.equals(s2)
               result1=result.replaceAll("!","")
string S
        for (int i = 0; i < S.length(); ++i)
            last[S.charAt(i) - 'a'] = i;（0：a 1:b...）
	String str = s.substring(startIndex, i + 1);
              
                    





 compare and sort
int[][] intervals
        Arrays.sort(intervals,new Comparator<int[]>(){
            @Override(s-b)
            public int compare(int[] o1, int[] o2) {
            if (o1[0] == o2[0]) return 0;
            if (o1[0] < o2[0]) return -1;
            return 1;
            }
        });

        Arrays.sort(people, (a, b) -> {
            if (a[0] == b[0]) return a[1] - b[1];(S-B)
            return b[0] - a[0];(B-S)
        });


  Iterator<Pair> iterator=lists[pos].iterator();
                while(iterator.hasNext()){
                 Pair temp=iterator.next();
  Iterator<Map.Entry<Integer, Integer>> iterator = map.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry<Integer, Integer> entry = iterator.next();
		entry.getValue()
entry.getKey()


位运算  ^  1^1=0
 1^0=1 result^result=0;
与&：0&0=0 0&1=0 1&0=0 1&1=1

或|：0|0=0 0|1=1 1|0=1 1|1=1

异或^：0^0=0 0^1=1 1^0=1 1^1=0

取反~：~1=0 ~0=1

左移<<：左边的二进制位丢弃，右边补0

右移>>：正数左补0，负数左补1，右边丢弃

无符号左移<<<：左边的二进制位丢弃，右边补0

无符号右移>>>：忽略符号位，空位都以0补齐










n < 0 ? a : b
public int helper() {}
int i = 3;
int a = i++; // a = 3, i = 4
Integer.toString(root.val)
Integer.parseInt(str)、
Integer.MIN_VALUE
 matrix[left/coloumn][left%coloumn]

           Random random = new Random();
            int randomIndex = random.nextInt(3);(0-2)

Linklisted<Integer> to int[]  :result.stream().mapToInt(Integer::intValue).toArray();