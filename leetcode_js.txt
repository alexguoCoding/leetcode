Array:

	const array1 = [1, 2, 3];
	firstElement = array1.shift();
	array1.push(num);
	array1.unshift(4, 5)//add front of array1
	const reversed = array1.reverse();
               (visited [][]) const visited = new Array(maze.length).fill(false).map(() => new Array(maze[0].length).fill(false));
	s=s.concat(tempstr); (combine two array)
                array1.sort()


let num1='';
num1=num1.split("").reverse().join("")(reverse string)
result.join("-").toUpperCase()
num1=parseInt(num1)(string->num)
num1=num1.toString()(num>string)
num3.charAt(0)(从左到右)
   unshift -> [array] <- push
   shift   <- [array] -> pop
str1 == str2
process.stdout.write("num1 ");
sum.substring(0,firstl)
final=result.join("-").toUpperCase()
local=local.replaceAll('.','')
let sign=e.indexOf('@');

Map :
             let map = new Map()
             map.set(curr, temp)
              map.get(curr.random)
	map.has(curr.random)
	map.set(a, (map.get(a) || 0) + 1)))
	for (let [key, value] of map) {
Set:          set1.add(42);
                set,delete
               set1.has(1)
             
       



Math    
              Math.floor()
	Math.pow(7, -2)

              undefine|0=>0

deepcopy:  let arraystr=[...palindrome]
                 let newstr=str.split()

Char:       a'.charCodeAt()

bit manita:
              n=n>>>1(no sign)
             n=n<<1(ADD 0 to right)
	xorAll&(-xorAll) get last pos   1 for xorall 
             a^b =0 （if a=b）

https://github.com/datastructures-js/priority-queue

               a.front(get most priority) a.back
              a.enqueue(item);(insert)
              a.dequeue(remove and get priority)
              a.isEmpty()
              a.size()
               q = new MinPriorityQueue({ priority: ([i,j]) => nums1[i] + nums2[j]})
  	let [i,j] = q.dequeue().element

Sort: nums=nums.sort((a,b)=>b-a) (big to small)

Copy :let arrayCopy = [...array];(shadow only for 1 dimension)
let nestedArray = [1, [2], 3];(2 dimention) 
let arrayCopy = JSON.parse(JSON.stringify(nestedArray)); 

