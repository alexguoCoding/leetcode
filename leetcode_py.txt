Array:

nums.sort()
n=len(nums)
for i,num in enumerate(nums):
for i in range(l):
for x in range(2, 30, 3):
for i in nums:
 sortArray=sorted(arr)
 dp = [[0, 0] for _ in range(l)]
result.append(root.val)
arrayOrList.insert(0 , 0)
arrayOrList.pop()
s = ''.join(char_list)
sort1=sorted(sort1, key=lambda x: x[0])
 work[0:2]=[1,2]
 maxtarget = max(flights[i][1] for i in range(len(flights)))
 dp = [[float('inf')] * n for _ in range(k + 2)]
words = list(set(words)) #remove duplicates



String:
string[start:end]
string[0].c
s[0].isalpha()
a=s.index('@')
a.split(",")
a.replace("H", "J")
s = "hello"
char_array = list(s)
reversed(word)



Map

map_dict = {}
map_dict[curr] = temp
value = map_dict.get(curr.random)
key_exists = curr.random in map_dict
a = "some_key"
map_dict[a] = map_dict.get(a, 0) + 1
for key, value in map_dict.items():
    # Your code inside the loop
map1==map2
len(map_dict )

Set

set1 = set()
set1.add(42)
Checking if an element exists in the set
element_exists = 1 in set1
t = tuple([1,2]) set1.add(t)

Math
float('inf')
float('-inf')
math.ceil(-23.11)
math.floor(-23.11)
math.pow(9, 3)

result = 0 if min1 == 100000 else min1
 return -1 if ans == float("inf") else ans
 for w in reversed(word):
class Node(object):
    def __init__(self):
        self.children={}
 even[ord(char)-ord('a')]